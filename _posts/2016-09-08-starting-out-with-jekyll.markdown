---
layout: post
title:  "Starting out with Jekyll"
date:   2016-09-07
categories: jekyll
---
I'm Matt, and I decided I'd start this blog to discuss the different topics I'm learning about in the area of coding, Maths, technology, and anything else I think is interesting or relevant.

In this post I'm going to say a bit about what I've learned about [Jekyll][1] in the process of setting up this blog. I won't be running through all the steps to get a Jekyll site up and running; there are plenty of people who have done that. Instead, I just want to cover what I think are the fundamental principles of Jekyll.

# What is Jekyll?

Jekyll is a tool for creating simple, static sites. What this means is that it does not use a database, or any real-time, dynamic code when in use. All of the site's layout and directories are generated by Jekyll whenever the 'bundle exec jekyll build' command is run. You can then upload the site to your host. This makes it fast and able to run on the simplest web hosts (I am hosting it on GitHub pages, as you may have noticed, which is free).

# Why use it?

My experience of static sites, has been that they required a fairly hands-on approach to maintaining the folder structure, and manually editing multiple files whenever changes are made. As mentioned before, Jekyll does all of this for you. All I have to focus on as a blogger is writing posts, saving them as *.markdown* files, and placing them into the *_posts* directory. Conversely, because it is so simple, it dodges need to set up the backend of a traditional MVC blog app. The approach by WordPress et al focuses on the entire blog as a piece of software for authoring and publishing posts within the browser. For me, it's a case of WordPress being a sledgehammer to crack a nut. They describe Jekyll as being 'blog aware'; it has built-in support for blogging, and the basic site scaffold which is initially generated is a blog page.

# Markdown

As mentioned before, Jekyll uses [Markdown][2], a text to HTML conversion tool.

![Markdown in action][3]

The essence of Markdown is readability and minimal use of symbols for formatting -- Jekyll uparses the markdown files each time the site is built. It's a great addition to Jekyll's functionality which allows rich text formatting without the hassle of HTML tags. There's a basic guide to Markdown [here][4]. The key thing to note from the screenshot above, is that the only directory which is updated is *_posts*. Whenever a file with the naming format *year-month-day-title.markdown* is dropped in there, it will rebuild file structure and produce the *category/year/month/day/title.html* structure.


# Liquid

As Jekyll is built using ruby, it allows the use of [Liquid][5] tags. It allows you to use ruby code inline with your HTML or, in this case, Markdown files.

{% highlight liquid %}
{% raw %}
{% assign foo =  "bar" %}
{{ foo }}
{% endraw %}
{% endhighlight %}

would display

{% highlight liquid %}
{% assign foo = "bar" %}
{{ foo }}
{% endhighlight %}

With the basic scaffold, the front page contains a for loop which iterates through all the posts which, upon the site rebuild, will render a new *index.html* with a list of posts.

{% highlight html %}
{% raw %}
{% for post in site.posts %}
<li>
  <h2>
    <a class="post-link" href="{{ post.url | prepend: site.baseurl }}">
      {{ post.title | escape }}
    </a>
  </h2>
  <span class="post-meta">
    {{ post.date | date: "%b %-d, %Y" }}
  </span>
  <p>
    {{ post.excerpt }}
  </p>
</li>
{% endfor %}
{% endraw %}
{% endhighlight %}

It basically builds the new post list on the front page, taking the information contained in each post in turn. On a dynamic site with a database, such as perhaps a Ruby on Rails blog, this would happen in more-or-less real time rather.

[1]: https://jekyllrb.com
[2]: https://daringfireball.net/projects/markdown/
[3]: /assets/markdown.png
[4]: https://daringfireball.net/projects/markdown/basics
[5]: https://help.shopify.com/themes/liquid/